{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","App","pageRef","useState","count","range","add","minus","multiply","divid","randomSlot","state","setState","handleChange","event","target","name","value","checked","generateOnePage","index","className","key","generateGroupWithin10","genreateRandomOperator","operations","push","length","number","items","minRange","parseInt","Number","isInteger","maxRange","i","operator","firstNumber","secondNumber","result","emptySlot","emptyPlace","TextField","id","type","defaultValue","onChange","InputLabelProps","shrink","inputProps","step","FormControlLabel","control","Checkbox","color","label","trigger","Button","variant","content","ref","page","pages","correctedCount","generatePages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a77b4fa3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"typeface-roboto\";\nimport ReactToPrint from \"react-to-print\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport \"rc-input-number/assets/index.less\";\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport \"./App.css\";\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\n\n\nfunction App() {\n  \n  let pageRef = null;\n\n  const [state, setState] = useState({\n    count: 1,\n    min: 1,\n    range: 10,\n    add: true,\n    minus: true,\n    multiply: true,\n    divid: true,\n    randomSlot: false,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.value || event.target.checked  });\n  };\n\n  function generatePages() {\n    const pages = [];\n  \n    pages.push(generateOnePage(0));\n\n    const correctedCount = parseInt(state.count) > 10? 10:parseInt(state.count)\n    for (var i = 1; i < correctedCount; i++) {\n      pages.push(generateOnePage(i));\n    }\n    return pages;\n  }\n  \n  function generateOnePage(index) {\n    return (\n      <div className=\"page\" key={index}>\n        <div className=\"page-header\">\n          <div>\n            Name: ___________\n            {/* <img alt=\"yaya\" className=\"image\" src={require(\"./yaya.jpg\")} /> */}\n          </div>\n          <div>Date:___________</div>\n          <div>Score:___________</div>\n        </div>\n        <div className=\"content\">\n          {generateGroupWithin10(25)}\n          {generateGroupWithin10(25)}\n          {generateGroupWithin10(25)}\n          {generateGroupWithin10(25)}\n        </div>\n        <div className=\"pagebreak\"> </div>\n      </div>\n    );\n  }\n\n  function genreateRandomOperator() {\n    const operations = []\n    if(state.add)operations.push('+');\n    if(state.minus)operations.push('-');\n    if(state.multiply)operations.push('*');\n    if(state.divid)operations.push('/');\n    if(!operations.length){\n      operations.push('+');\n    }\n    \n    return operations[getRandomInt(0, 100)%operations.length];\n  }\n\n  function generateGroupWithin10(number) {\n    const items = [];\n    let minRange = parseInt(state.min);\n    if (!Number.isInteger(minRange)) {\n      minRange = 0;\n    }\n\n    let maxRange = parseInt(state.range);\n    if (!Number.isInteger(maxRange) || maxRange <= 0) {\n      maxRange = 10;\n    }\n  \n    for (var i = 0; i < number; i++) {\n      const operator = genreateRandomOperator();\n  \n      let firstNumber =\n        \"+\" === operator ? getRandomInt(minRange, maxRange - 1) : getRandomInt(minRange, maxRange);\n  \n      let secondNumber =\n        \"+\" === operator\n          ? getRandomInt(0, maxRange - firstNumber)\n          : getRandomInt(0, firstNumber);\n  \n      let result =\n        \"+\" === operator\n          ? firstNumber + secondNumber\n          : firstNumber - secondNumber;\n\n      if ( \"/\" === operator){\n        secondNumber = getRandomInt(minRange, maxRange);\n        result = getRandomInt(minRange <=0? 1: minRange, maxRange);\n        firstNumber = secondNumber*result;\n      }\n\n      if ( \"*\" === operator){\n        firstNumber = getRandomInt(minRange, maxRange);\n        secondNumber = getRandomInt(minRange, maxRange);\n        result = firstNumber*secondNumber;\n      }\n  \n      const emptySlot = getRandomInt(1, 4);\n  \n      const emptyPlace = <span>(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)</span>;\n      if (emptySlot === 1 && state.randomSlot) {\n        firstNumber = emptyPlace;\n      } else if (emptySlot === 2 && state.randomSlot) {\n        secondNumber = emptyPlace;\n      } else {\n        result = \"\";\n      }\n  \n      items.push(\n        <div className=\"item\" key={i}>\n          {firstNumber} {operator} {secondNumber} = {result}\n        </div>\n      );\n    }\n  \n    return <div className=\"group\">{items}</div>;\n  }\n  \n  return (\n    <div>\n      <div className=\"controllers\">\n        <div className=\"controllers\">\n          Number of Pages:\n          <TextField\n            id=\"count\"\n            name=\"count\"\n            type=\"number\"\n            defaultValue={state.count}\n            onChange={handleChange}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n          />\n        </div>\n        <div className=\"controllers\">\n          Min:\n          <TextField\n            id=\"min\"\n            name=\"min\"\n            type=\"number\"\n            defaultValue={state.min}\n            onChange={handleChange}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            inputProps={{ min: \"0\", max: state.range, step: \"5\" }}\n          />\n        </div>\n        <div className=\"controllers\">\n          Max Range:\n          <TextField\n            id=\"range\"\n            name=\"range\"\n            type=\"number\"\n            defaultValue={state.range}\n            onChange={handleChange}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            inputProps={{ min: \"10\", max: \"100\", step: \"5\" }}\n          />\n        </div>\n        <div className=\"controllers2\">\n        <FormControlLabel control={<Checkbox name=\"add\" color=\"primary\" checked={state.add} onChange={handleChange} />} label=\"+\" />\n        <FormControlLabel control={<Checkbox name=\"minus\" color=\"primary\" checked={state.minus} onChange={handleChange} />} label=\"-\" />\n        <FormControlLabel control={<Checkbox name=\"multiply\" color=\"primary\" checked={state.multiply} onChange={handleChange} />} label=\"*\" />\n        <FormControlLabel control={<Checkbox name=\"divid\" color=\"primary\" checked={state.divid} onChange={handleChange} />} label=\"/\" />\n        </div>\n        <div className=\"controllers\">\n          Random empty slot:\n          <Checkbox\n            checked={state.randomSlot}\n            onChange={handleChange}\n            name=\"randomSlot\"\n            color=\"primary\"\n          />\n        </div>\n\n        <ReactToPrint\n          trigger={() => <Button variant=\"contained\" color=\"primary\">\n          Print out\n        </Button>}\n          content={() => pageRef}\n        />\n      </div>\n      <div\n        className=\"pages\"\n        ref={(page) => {\n          pageRef = page;\n        }}\n      >\n        {generatePages(state.count, state.range)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}